(function (sandbox) {
    function MyAnalysis () {
	var getGlobalIid = sandbox.getGlobalIID;
	var getIIDInfo = sandbox.iidToLocation;
        var Constants = sandbox.Constants;
        var HOP = Constants.HOP;

	var callerIidToCalleeIidsMap = {}; // caller iid => callee iid => iid of call site => count
        var iidToFunName = {0:"Program"}; // function iid => function name
        var iidToInvocationCount = {0:1}; // function iid => number of times the function is invoked

        var callStack = [0];
	var callTrace = [0];
        var invokedAtIid;

	this.invokeFunPre = function (iid, f, base, args, isConstructor) {
	    console.log("Inside the invokeFunPre");
            invokedAtIid = iid;
        }

	this.functionEnter = function (iid, fun, dis /* this */, args) {
            var callerIid = callStack[callStack.length - 1];
            if (!HOP(callerIidToCalleeIidsMap, callerIid)) {
                callerIidToCalleeIidsMap[callerIid] = {};
            }
            var callees = callerIidToCalleeIidsMap[callerIid];
            if (!HOP(callees, iid)) {
                callees[iid] = {};
            }
            var callee = callees[iid]
            if (!HOP(callee, invokedAtIid)) {
                callee[invokedAtIid] = 0;
            }
            callee[invokedAtIid] = callee[invokedAtIid] + 1;
            iidToFunName[iid] = fun.name;
            if (!HOP(iidToInvocationCount, iid)) {
                iidToInvocationCount[iid] = 1;
            } else {
                iidToInvocationCount[iid] = iidToInvocationCount[iid] + 1;
            }

            callStack.push(iid);
	    callTrace.push(iid);
	    console.log("Enter: Function name : "+fun.name+ ", defined at location: "+J$.iids['originalCodeFileName']+", having a unique IID of: "+getIIDInfo(iid)+', and its source map is: ['+J$.iids[iid]+']');
        }

	this.functionExit = function (iid) {
            callTrace.push(iid);
	    var fiid = callStack[callStack.length - 1];
	    //getIIDInfo(sandbox.getGlobalIID(iid))
   	    console.log("EXIT: Function name: "+iidToFunName[fiid]+", defined at location: "+J$.iids['originalCodeFileName']+", having a unique IID of: "+getIIDInfo(iid)+', and its source map is: ['+J$.iids[iid]+']');
            callStack.pop();
            return false;
            /* a return of false means that do not backtrack inside the function */
        }

	this.endExecution = function () {
            var sortingArr = [];

	    callTrace.push(0);
            var printTrace = {Trace:callTrace};

            for (var iid in iidToInvocationCount) {
                if (HOP(iidToInvocationCount, iid)) {
                    sortingArr.push([iid, iidToInvocationCount[iid]]);
                }
            }
            sortingArr.sort(function (a, b) {
                return b[1] - a[1];
            });

            var i, len = sortingArr.length;
            for (i = 0; i < len; i++) {
                var callerIId = sortingArr[i][0];
                console.log("Function " + iidToFunName[callerIId] + " defined at " + getIIDInfo(callerIId) + " was invoked " + 			iidToInvocationCount[callerIId] + " time(s) and it called:");
                if (HOP(callerIidToCalleeIidsMap, callerIId)) {
                    var callees = callerIidToCalleeIidsMap[callerIId];
                    for (var calleeIid in callees) {
                        if (HOP(callees, calleeIid)) {
                            var callSites = callees[calleeIid];
                            for (var callSite in callSites) {
                                if (HOP(callSites, callSite)) {
                                    console.log("    function " + iidToFunName[calleeIid] + " defined at " + getIIDInfo(calleeIid) + " " + 					    callSites[callSite] + " time(s) at call site " + getIIDInfo(callSite));
                                }
                            }
                        }
                    }
                } else {
                    console.log("    none")
                }
            }
	    var jsonlocation = '/CallGraph.json';
            console.log("Generating CallGraph.json ...");
            // store the call graph by serializing  callerIidToCalleeIidsMap and iidToFunName
            require('fs').writeFileSync(jsonlocation, JSON.stringify([iidToFunName, iidToInvocationCount, callerIidToCalleeIidsMap, 	    printTrace], undefined, 4), "utf8");
        }
    }
    sandbox.analysis = new MyAnalysis();
})(J$);
