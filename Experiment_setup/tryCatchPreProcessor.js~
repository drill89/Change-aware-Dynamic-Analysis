// Author: Michael Pradel

/**
 * Takes a piece of JS code, instruments it with Jalangi, and
 * appends the outcome of the execution (= a summary of all computed
 * values) as the final expression.
 */
(function () {

    //put the path to include api.js file from jalangi framework
    var jalangi = require("./../jalangi2/src/js/utils/api.js");

    /*var engineStateVarName = "__diffTestingEngineState__";
    var endOfCodeMarker = "__diffTestingEndOfCode__";

    var template = '__diffTestingEngineState__ = { state: [] , result: "noResultYet" };\
    \
        try {\
            CODE\
        } catch(e) {\
            __diffTestingEngineState__.result = "crash";\
            \ console.log("The error is " + e);\
        }\
    __diffTestingEngineState__.result\;';
    */

    function preProcess(code) {
	var readfile = "./My_lib/my_lib_v1.js";
	var writefile = "./My_lib/source_instrumented.js";
        var instrumented = jalangi.instrumentString(code,readfile,writefile,true,true);
        if (instrumented.instAST === undefined) return; // instrumentation failed; probably code is syntactically incorrect
        /* Using String.prototype.replace() will break if the insturmented code contains '$' which has special meaning */
	var sourcemap = JSON.stringify(instrumented.sourceMapObject);
        var transformedCode = instrumented.code;
//template.split("CODE").join(instrumented.code);
        return sourcemap;
    }

    exports.preProcess = preProcess;

})();
